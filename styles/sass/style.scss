@import "partials/_common.scss";
@import "partials/_trig.sass";

// ██╗░░░██╗░█████╗░██████╗░██╗░█████╗░██████╗░██╗░░░░░███████╗░██████╗
// ██║░░░██║██╔══██╗██╔══██╗██║██╔══██╗██╔══██╗██║░░░░░██╔════╝██╔════╝
// ╚██╗░██╔╝███████║██████╔╝██║███████║██████╦╝██║░░░░░█████╗░░╚█████╗░
// ░╚████╔╝░██╔══██║██╔══██╗██║██╔══██║██╔══██╗██║░░░░░██╔══╝░░░╚═══██╗
// ░░╚██╔╝░░██║░░██║██║░░██║██║██║░░██║██████╦╝███████╗███████╗██████╔╝
// ░░░╚═╝░░░╚═╝░░╚═╝╚═╝░░╚═╝╚═╝╚═╝░░╚═╝╚═════╝░╚══════╝╚══════╝╚═════╝░

$title-font: "Raleway", sans-serif;

$palette: (
    "bg": #201f20,
    "line": #fffafc,
    "pink": #ef476f,
    "yellow": #ffd166,
    "green": #06d6a0,
    "blue": #118ab2,
    "navy": #073b4c,
);

$mandala-sizes: (1, 3);

$rad: (
    pedals1: (
        parent: ".pedals1",
        target: ".pedal-shell",
        number: 12,
        offset: 0,
        distance: 16,
    ),
    pedals2: (
        parent: ".pedals2",
        target: ".pedal-shell",
        number: 6,
        offset: $PI / 6,
        distance: 20,
    ),
    pedals3: (
        parent: ".pedals3",
        target: ".pedal-shell",
        number: 6,
        offset: 0,
        distance: 20,
    ),
    pedals4: (
        parent: ".pedals4",
        target: ".pedal-shell",
        number: 12,
        offset: $PI / 12,
        distance: 40,
    ),
    pedals5: (
        parent: ".pedals5",
        target: ".pedal-shell",
        number: 12,
        offset: 0,
        distance: 60,
    ),
    pedals6: (
        parent: ".pedals6",
        target: ".pedal-shell",
        number: 12,
        offset: $PI / 12,
        distance: 60,
    ),
    pedals7: (
        parent: ".pedals7",
        target: ".pedal-shell",
        number: 24,
        offset: $PI / 24,
        distance: 85,
    ),
    pedals8: (
        parent: ".pedals8",
        target: ".pedal-shell",
        number: 8,
        offset: 0,
        distance: 100,
    ),
    dashes1: (
        parent: ".dashes1",
        target: ".dash-body",
        number: 12,
        offset: $PI / 12,
        distance: 41,
    ),
    dashes2: (
        parent: ".dashes2",
        target: ".dash-body",
        number: 12,
        offset: 0,
        distance: 47,
    ),
    dashes3: (
        parent: ".dashes3",
        target: ".dash-body",
        number: 24,
        offset: 0,
        distance: 85,
    ),
    dots1: (
        parent: ".dots1",
        target: ".ring-body",
        number: 12,
        offset: 0,
        distance: 65,
    ),
);

$str: (1);

// ███████╗██╗░░░██╗███╗░░██╗░█████╗░████████╗██╗░█████╗░███╗░░██╗░██████╗
// ██╔════╝██║░░░██║████╗░██║██╔══██╗╚══██╔══╝██║██╔══██╗████╗░██║██╔════╝
// █████╗░░██║░░░██║██╔██╗██║██║░░╚═╝░░░██║░░░██║██║░░██║██╔██╗██║╚█████╗░
// ██╔══╝░░██║░░░██║██║╚████║██║░░██╗░░░██║░░░██║██║░░██║██║╚████║░╚═══██╗
// ██║░░░░░╚██████╔╝██║░╚███║╚█████╔╝░░░██║░░░██║╚█████╔╝██║░╚███║██████╔╝
// ╚═╝░░░░░░╚═════╝░╚═╝░░╚══╝░╚════╝░░░░╚═╝░░░╚═╝░╚════╝░╚═╝░░╚══╝╚═════╝░

@function FromTo($from, $to) {
    $onoff: true;
    $list: ();
    $i: $from;
    @while $i <= $to {
        $list: append($list, "#{$i}px");
        @if $onoff {
            $onoff: false;
            $i: $i + 2;
        } @else {
            $onoff: true;
            $i: $i + 3;
        }
    }
    @return $list;
}

// ███╗░░░███╗░█████╗░██╗███╗░░██╗    ███╗░░░███╗██╗██╗░░██╗██╗███╗░░██╗░██████╗
// ████╗░████║██╔══██╗██║████╗░██║    ████╗░████║██║╚██╗██╔╝██║████╗░██║██╔════╝
// ██╔████╔██║███████║██║██╔██╗██║    ██╔████╔██║██║░╚███╔╝░██║██╔██╗██║╚█████╗░
// ██║╚██╔╝██║██╔══██║██║██║╚████║    ██║╚██╔╝██║██║░██╔██╗░██║██║╚████║░╚═══██╗
// ██║░╚═╝░██║██║░░██║██║██║░╚███║    ██║░╚═╝░██║██║██╔╝╚██╗██║██║░╚███║██████╔╝
// ╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝╚═╝░░╚══╝    ╚═╝░░░░░╚═╝╚═╝╚═╝░░╚═╝╚═╝╚═╝░░╚══╝╚═════╝░

@mixin CircleDivs($parent, $target, $amt, $turn, $offset, $dist) {
    @for $i from 1 through $amt {
        #{$parent} #{$target}:nth-child(#{$i}) {
            transform: translate(
                    #{cos($i * $turn + $offset) * $dist}px,
                    #{sin($i * $turn + $offset) * $dist}px
                )
                rotate(#{$i * $turn + $offset}rad);
        }
    }
}

@mixin AddClasses($map) {
    @each $key, $prop in $map {
        @if nth($prop, 1) == "noncustom" {
            @each $item in nth($prop, 2) {
                .#{$key}-#{$item} {
                    #{$key}: #{$item};
                }
            }
        } @else {
            @if $key == "radius" {
                @each $_, $item in nth($prop, 2) {
                    @include CircleDivs(
                        map-get($item, "parent"),
                        map-get($item, "target"),
                        map-get($item, "number"),
                        $TWO_PI / map-get($item, "number"),
                        map-get($item, "offset"),
                        map-get($item, "distance")
                    );
                }
            }
        }
    }
}

@mixin SpinKeyframe($scale, $direc) {
    $angle: 0;
    @if $direc == "clockwise" {
        $angle: 360deg;
    } @else {
        $angle: -360deg;
    }
    @keyframes Spin-#{$direc}-#{$scale} {
        to {
            transform: scale($scale) rotate($angle);
        }
    }
}

// ░██████╗████████╗██╗░░░██╗██╗░░░░░███████╗░██████╗
// ██╔════╝╚══██╔══╝╚██╗░██╔╝██║░░░░░██╔════╝██╔════╝
// ╚█████╗░░░░██║░░░░╚████╔╝░██║░░░░░█████╗░░╚█████╗░
// ░╚═══██╗░░░██║░░░░░╚██╔╝░░██║░░░░░██╔══╝░░░╚═══██╗
// ██████╔╝░░░██║░░░░░░██║░░░███████╗███████╗██████╔╝
// ╚═════╝░░░░╚═╝░░░░░░╚═╝░░░╚══════╝╚══════╝╚═════╝░

// Setup

// Adds the basic classes needed for the mandala sizes to work
@include AddClasses(
    (
        width: (
            "noncustom",
            FromTo(0, 200),
        ),
        height: (
            "noncustom",
            FromTo(0, 200),
        ),
        radius: (
            "custom",
            $rad,
        ),
        straight: (
            "custom",
            $str,
        ),
    )
);

// Will make a keyframe for all sizes and directions for a mandala to spin
@each $val in $mandala-sizes {
    @include SpinKeyframe($val, "clockwise");
    @include SpinKeyframe($val, "counterclockwise");
}

// Actual styles

body {
    background-color: map-get($palette, "bg");
    .intro {
        overflow: hidden;
        background-color: map-get($palette, "bg");
        @include GridOver;
        height: 100vh;
        width: 100vw;
        animation: fade-out 0.5s 5s;
        animation-fill-mode: both;
    }
    .mandala {
        transform: scale(3);
        animation: Spin-clockwise-3 60s 0 linear;
        animation-iteration-count: infinite;
        &:nth-of-type(1) {
            align-self: flex-end;
            justify-self: flex-end;
        }
    }
    .intro-text {
        width: 60vw;
        height: 13em;
        overflow: hidden;
        align-self: center;
        justify-self: center;
        font-family: $title-font;
        color: map-get($palette, "line");
        h1 {
            @include FlexCenter(row);
            gap: 0.5vw;
            font-size: 10em;
            line-height: 1em;
            span {
                transform: translate(0, 5em);
                @for $i from 0 through 7 {
                    &:nth-of-type(#{$i}) {
                        animation: slide-up 1s #{$i / 7}s ease;
                        animation-fill-mode: both;
                    }
                }
            }
        }
        h2 {
            opacity: 0;
            text-align: center;
            font-size: 1.5em;
            animation: fade-in 1s 2s ease;
            animation-fill-mode: both;
            span {
                color: map-get($palette, "green");
            }
        }
    }
}

.mandala {
    width: fit-content;
    height: fit-content;
    @include GridOver;
    * {
        position: relative;
        justify-self: center;
        align-self: center;
        @include GridOver;
    }
    .pedal {
        width: auto;
        height: auto;
        .pedal-shell {
            display: flex;
            align-items: center;
            border-radius: 0 50% 50% 0;
            background-color: map-get($palette, "line");
            .pedal-whitespace {
                background-color: map-get($palette, "bg");
                border-radius: 0 50% 50% 0;
            }
        }
    }
    .ring-body {
        @include FlexCenter(row);
        background-color: map-get($palette, "line");
        border-radius: 50%;
        .ring-whitespace {
            background-color: map-get($palette, "bg");
            border-radius: 50%;
        }
    }
    .dash {
        .dash-body {
            border-radius: 50%;
            background-color: map-get($palette, "line");
        }
    }
}

@keyframes slide-up {
    to {
        transform: translate(0, 0);
    }
}
